<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Labeling Tasks</title>

  <%- include("../partials/styles.ejs") %>

</head>
<body>

  <header class="bg-light border">
    <nav class="navbar px-3">
      <h4>Labeling Tasks</h4>
    </nav>
  </header>

  <main class="container-fluid">
    <aside class="float-sm-end p-3 border-start col-2 sticky-top" style="overflow-y: scroll; height: 100vh;">
      <h2>Pendings</h2>
      <div id="pendings"></div>
    </aside>

    <aside class="float-sm-start p-3 border-end col-2 sticky-top" style="overflow-y: scroll; height: 100vh;">
      <h2>Task Details</h2>

      <div class="mt-4">
        <small class="text-secondary">ID</small>
        <p id="taskId"></p>
      </div>
      <div>
        <small class="text-secondary">Title</small>
        <p id="title"></p>
      </div>
      <div>
        <small class="text-secondary">Description</small>
        <p id="description"></p>
      </div>
      <div>
        <small class="text-secondary">Labels (Options)</small>
        <ul id="labels" class="list-group"></ul>
      </div>
      <div class="mt-3">
        <small class="text-secondary">Status</small>
        <p id="status"></p>
      </div>

      <div class="mt-3">
        <small class="text-secondary">Actions</small>
        <div class="btn-group-vertical w-100">
          <button id="reportButton" class="btn btn-warning">Report</button>
          <button id="submitButton" class="btn btn-success">Submit</button>
        </div>
      </div>
    </aside>

    <section class="col-7 mx-auto">
      <div class="container-fluid p-3">
        <div class="col-4 float-sm-end card p-4 sticky-top">
          <small class="text-secondary">Labels (Options)</small>
          <div id="labelsContainer" class="btn-group-vertical mt-3" role="group"></div>
        </div>
        <div id="active" class="col-7"></div>

        <div class="my-3 col-12">
          <ul class="pagination" id="imagePagination">
          </ul>
        </div>
      </div>
    </section>

  </main>

<script src="/public/js/modules/pagination.js"></script>
<script src="/public/js/modules/nodes.js"></script>
<script src="/public/js/labeling/index.js"></script>

<!-- <script>


const activeContainer = document.getElementById("active")
const pendingsContainer = document.getElementById("pendings")
const submitBtn = document.getElementById("submitButton")



let active = {}
let tasks = []



// BUTTON CLICK EVENT LISTENERS
const submitLabels = async () => {
  const updatedImages = active.Images
  const images = await putImageLabelsAPI(updatedImages)
  const activeTask = await putLabelingTaskAsDoneAPI(active.labelingTaskId)
  if (images && activeTask) setup()
}
// BUTTON CLICK EVENT LISTENERS



// HTTP FETCHING TASKS FUNCTIONS
const fetchTasks = async () => {
  try {
    const res = await fetch("http://localhost:3000/labeling/api/read")
    const json = await res.json()
    if (json.length !== 0) active = json[0]
    return Promise.resolve(json)
  } catch (err) {
    console.error(err)
    return Promise.resolve([])
  }
}

const putImageLabelsAPI = async (updatedImages) => {
  try {
    const res = await fetch("http://localhost:3000/labeling/api/images", {
      method: "PUT",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify(updatedImages)
    });
    console.log(res)
    const json = await res.json()
    console.log(json)
    return json ? Promise.resolve(true) : Promise.resolve(false)
  } catch (err) {
    console.error(err)
    return Promise.resolve(false)
  }
}

const putLabelingTaskAsDoneAPI = async (labelingTaskId) => {
  try {
    const res = await fetch(`http://localhost:3000/labeling/api/${labelingTaskId}/done`, {
      method: "PUT"
    })
    const json = await res.json()
    return json ? Promise.resolve(true) : Promise.resolve(false)
  } catch (err) {
    console.error(err)
    return Promise.resolve(false)
  }

}
// HTTP FETCHING TASKS FUNCTIONS



// DOM ELEMENTS STYLING
const setStyleOfPendingTaskCard = (div, name, description) => {
  div.classList.add("card", "my-2", "p-3", "px-4", "shadow-sm")
  div.style.cursor = "pointer"
}

// DOM ELEMENTS STYLING



// DOM MANIPULATION FUNCTIONS
const setTasksOnDOM = async () => {
  tasks.forEach((task, idx) => {
    const taskDiv = document.createElement("div")
    const taskName = document.createElement("h4")
    const taskDescription = document.createElement("p")

    setStyleOfPendingTaskCard(taskDiv, taskName, taskDescription)

    taskName.textContent = task.name
    taskDescription.textContent = task.description
    taskDiv.id = `task-${idx}`
    taskDiv.appendChild(taskName)
    taskDiv.appendChild(taskDescription)

    taskDiv.addEventListener("click", () => {
      active = tasks[idx]
      setActiveTask()
    })

    pendingsContainer.appendChild(taskDiv)
  }); 
}

const clearChildNodes = (parent) => {
  let child = parent.lastElementChild
  while (child) {
    parent.removeChild(child)
    child = parent.lastElementChild
  }
}

const clearAll = () => {
  clearChildNodes(activeContainer)
  clearChildNodes(pendingsContainer)
}

const setActiveTask = async () => {
  clearChildNodes(activeContainer)

  const taskTitle = document.createElement("h2")
  const taskDescription = document.createElement("p")
  taskTitle.textContent = active.name
  taskDescription.textContent = active.description

  activeContainer.appendChild(taskTitle)
  activeContainer.appendChild(taskDescription)
  
  active.Images.forEach((image, idx) => {
    const imageContainer = document.createElement("div")
    const img = document.createElement("img")

    img.src = image.path.slice(3)
    img.height = 200
    img.width = 200
    imageContainer.appendChild(img)

    active.labels.forEach((label, labelIdx) => {
      const labelCheck = document.createElement("input")
      const labelElement = document.createElement("label")
      labelCheck.id = `${idx}-${label}`
      labelCheck.name = `${idx}`
      labelCheck.type = "radio"
      labelCheck.value = label
      labelCheck.checked = label === image.label

      labelCheck.addEventListener("change", () => {
        active.Images[idx].label = label
      })

      labelElement.textContent = label
      labelElement.htmlFor = `${idx}-${label}`

      imageContainer.appendChild(labelCheck)
      imageContainer.appendChild(labelElement)
    })

    activeContainer.appendChild(imageContainer)
  })
}

const setup = async () => {
  clearAll()
  tasks = await fetchTasks()
  await setTasksOnDOM()
  await setActiveTask()
}
// DOM MANIPULATION FUNCTIONS

document.addEventListener("DOMContentLoaded", async () => {
  setup()
})


submitBtn.addEventListener("click", submitLabels)


</script> -->

</body>
</html>